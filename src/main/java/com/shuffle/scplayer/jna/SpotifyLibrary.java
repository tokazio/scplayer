package com.shuffle.scplayer.jna;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.sun.jna.Library;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>com.shuffle.spotify.core.jna</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SpotifyLibrary extends Library {
	/** enum values */
	public static interface SpError {
		/** <i>native declaration : line 3</i> */
		public static final int kSpErrorOk = 0;
		/** <i>native declaration : line 4</i> */
		public static final int kSpErrorFailed = 1;
		/** <i>native declaration : line 5</i> */
		public static final int kSpErrorInitFailed = 2;
		/** <i>native declaration : line 6</i> */
		public static final int kSpErrorWrongAPIVersion = 3;
		/** <i>native declaration : line 7</i> */
		public static final int kSpErrorNullArgument = 4;
		/** <i>native declaration : line 8</i> */
		public static final int kSpErrorInvalidArgument = 5;
		/** <i>native declaration : line 9</i> */
		public static final int kSpErrorUninitialized = 6;
		/** <i>native declaration : line 10</i> */
		public static final int kSpErrorAlreadyInitialized = 7;
		/** <i>native declaration : line 11</i> */
		public static final int kSpErrorLoginBadCredentials = 8;
		/** <i>native declaration : line 12</i> */
		public static final int kSpErrorNeedsPremium = 9;
		/** <i>native declaration : line 13</i> */
		public static final int kSpErrorTravelRestriction = 10;
		/** <i>native declaration : line 14</i> */
		public static final int kSpErrorApplicationBanned = 11;
		/** <i>native declaration : line 15</i> */
		public static final int kSpErrorGeneralLoginError = 12;
		/** <i>native declaration : line 16</i> */
		public static final int kSpErrorUnsupported = 13;
		/** <i>native declaration : line 17</i> */
		public static final int kSpErrorNotActiveDevice = 14;
		/** <i>native declaration : line 18</i> */
		public static final int kSpErrorPlaybackErrorStart = 1000;
		/** <i>native declaration : line 19</i> */
		public static final int kSpErrorGeneralPlaybackError = 1001;
		/** <i>native declaration : line 20</i> */
		public static final int kSpErrorPlaybackRateLimited = 1002;
		/** <i>native declaration : line 21</i> */
		public static final int kSpErrorUnknown = 1003;
	};
	/** enum values */
	public static interface SpConnectionNotify {
		/** <i>native declaration : line 25</i> */
		public static final int kSpConnectionNotifyLoggedIn = 0;
		/** <i>native declaration : line 26</i> */
		public static final int kSpConnectionNotifyLoggedOut = 1;
		/** <i>native declaration : line 27</i> */
		public static final int kSpConnectionNotifyTemporaryError = 2;
	};
	/** enum values */
	public static interface SpPlaybackNotify {
		/** <i>native declaration : line 31</i> */
		public static final int kSpPlaybackNotifyPlay = 0;
		/** <i>native declaration : line 32</i> */
		public static final int kSpPlaybackNotifyPause = 1;
		/** <i>native declaration : line 33</i> */
		public static final int kSpPlaybackNotifyTrackChanged = 2;
		/** <i>native declaration : line 34</i> */
		public static final int kSpPlaybackNotifyNext = 3;
		/** <i>native declaration : line 35</i> */
		public static final int kSpPlaybackNotifyPrev = 4;
		/** <i>native declaration : line 36</i> */
		public static final int kSpPlaybackNotifyShuffleEnabled = 5;
		/** <i>native declaration : line 37</i> */
		public static final int kSpPlaybackNotifyShuffleDisabled = 6;
		/** <i>native declaration : line 38</i> */
		public static final int kSpPlaybackNotifyRepeatEnabled = 7;
		/** <i>native declaration : line 39</i> */
		public static final int kSpPlaybackNotifyRepeatDisabled = 8;
		/** <i>native declaration : line 40</i> */
		public static final int kSpPlaybackNotifyBecameActive = 9;
		/** <i>native declaration : line 41</i> */
		public static final int kSpPlaybackNotifyBecameInactive = 10;
		/** <i>native declaration : line 42</i> */
		public static final int kSpPlaybackNotifyPlayTokenLost = 11;
		/** <i>native declaration : line 43</i> */
		public static final int kSpPlaybackEventAudioFlush = 12;
	};
	/** enum values */
	public static interface SpDeviceType {
		/** <i>native declaration : line 47</i> */
		public static final int kSpDeviceTypeUnknown = 0;
		/** <i>native declaration : line 48</i> */
		public static final int kSpDeviceTypeComputer = 1;
		/** <i>native declaration : line 49</i> */
		public static final int kSpDeviceTypeTablet = 2;
		/** <i>native declaration : line 50</i> */
		public static final int kSpDeviceTypeSmartphone = 3;
		/** <i>native declaration : line 51</i> */
		public static final int kSpDeviceTypeSpeaker = 4;
		/** <i>native declaration : line 52</i> */
		public static final int kSpDeviceTypeTV = 5;
		/** <i>native declaration : line 53</i> */
		public static final int kSpDeviceTypeAVR = 6;
		/** <i>native declaration : line 54</i> */
		public static final int kSpDeviceTypeSTB = 7;
		/** <i>native declaration : line 55</i> */
		public static final int kSpDeviceTypeAudioDongle = 8;
	};
	/** enum values */
	public static interface SpSampleType {
		/** <i>native declaration : line 59</i> */
		public static final int kSpSampleTypeS16NativeEndian = 0;
	};
	/** enum values */
	public static interface SpBitrate {
		/** <i>native declaration : line 63</i> */
		public static final int kSpBitrate160k = 0;
		/** <i>native declaration : line 64</i> */
		public static final int kSpBitrate320k = 1;
		/** <i>native declaration : line 65</i> */
		public static final int kSpBitrate90k = 2;
	};
	/** enum values */
	public static interface SpImageSize {
		/** <i>native declaration : line 69</i> */
		public static final int kSpImageSizeSmall = 0;
		/** <i>native declaration : line 70</i> */
		public static final int kSpImageSizeNormal = 1;
		/** <i>native declaration : line 71</i> */
		public static final int kSpImageSizeLarge = 2;
	};
	/**
	 * Original signature : <code>SpError SpInit(const SpConfig*)</code><br>
	 * <i>native declaration : line 140</i>
	 */
	int SpInit(SpConfig config);
	/**
	 * Original signature : <code>void SpFree()</code><br>
	 * <i>native declaration : line 141</i>
	 */
	void SpFree();
	/**
	 * Original signature : <code>SpError SpPumpEvents()</code><br>
	 * <i>native declaration : line 143</i>
	 */
	int SpPumpEvents();
	/**
	 * Original signature : <code>SpError SpGetMetadataValidRange(int*, int*)</code><br>
	 * <i>native declaration : line 145</i><br>
	 * @deprecated use the safer methods {@link #SpGetMetadataValidRange(java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #SpGetMetadataValidRange(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int SpGetMetadataValidRange(IntByReference start, IntByReference end);
	/**
	 * Original signature : <code>SpError SpGetMetadataValidRange(int*, int*)</code><br>
	 * <i>native declaration : line 145</i>
	 */
	int SpGetMetadataValidRange(IntBuffer start, IntBuffer end);
	/**
	 * Original signature : <code>SpError SpGetMetadata(SpMetadata*, int)</code><br>
	 * <i>native declaration : line 146</i>
	 */
	int SpGetMetadata(SpMetadata SpMetadataPtr1, int offset);
	/**
	 * Original signature : <code>SpError SpGetMetadataImageURL(const char*, SpImageSize, char*, size_t)</code><br>
	 * <i>native declaration : line 147</i><br>
	 * @deprecated use the safer methods {@link #SpGetMetadataImageURL(java.lang.String, int, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #SpGetMetadataImageURL(com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int SpGetMetadataImageURL(Pointer uri, int imageSize, Pointer url, NativeSize size);
	/**
	 * Original signature : <code>SpError SpGetMetadataImageURL(const char*, SpImageSize, char*, size_t)</code><br>
	 * <i>native declaration : line 147</i>
	 */
	int SpGetMetadataImageURL(String uri, int imageSize, ByteBuffer url, NativeSize size);
	
	int SpGetMetadataImageURL(String uri, int imageSize, Pointer url, NativeLong size);
	/**
	 * Original signature : <code>SpError SpGetPreset(SpPreset*, size_t*)</code><br>
	 * <i>native declaration : line 150</i>
	 */
	int SpGetPreset(SpPreset preset, NativeSizeByReference size);
	/**
	 * Original signature : <code>SpError SpPlayPreset(const SpPreset*, size_t)</code><br>
	 * <i>native declaration : line 151</i>
	 */
	int SpPlayPreset(SpPreset preset, NativeSize size);
	/**
	 * Original signature : <code>SpError SpSetDisplayName(const char*)</code><br>
	 * <i>native declaration : line 153</i><br>
	 * @deprecated use the safer methods {@link #SpSetDisplayName(java.lang.String)} and {@link #SpSetDisplayName(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SpSetDisplayName(Pointer name);
	/**
	 * Original signature : <code>SpError SpSetDisplayName(const char*)</code><br>
	 * <i>native declaration : line 153</i>
	 */
	int SpSetDisplayName(String name);
	/**
	 * Original signature : <code>char* SpGetLibraryVersion()</code><br>
	 * <i>native declaration : line 154</i>
	 */
	Pointer SpGetLibraryVersion();
	/**
	 * Original signature : <code>SpError SpZeroConfGetVars(SpZeroConfVars*)</code><br>
	 * <i>native declaration : line 156</i>
	 */
	int SpZeroConfGetVars(SpZeroConfVars vars);
	/**
	 * Original signature : <code>SpError SpPlaybackPlay()</code><br>
	 * <i>native declaration : line 158</i>
	 */
	int SpPlaybackPlay();
	/**
	 * Original signature : <code>SpError SpPlaybackPause()</code><br>
	 * <i>native declaration : line 159</i>
	 */
	int SpPlaybackPause();
	/**
	 * Original signature : <code>SpError SpPlaybackSkipToNext()</code><br>
	 * <i>native declaration : line 160</i>
	 */
	int SpPlaybackSkipToNext();
	/**
	 * Original signature : <code>SpError SpPlaybackSkipToPrev()</code><br>
	 * <i>native declaration : line 161</i>
	 */
	int SpPlaybackSkipToPrev();
	/**
	 * Original signature : <code>SpError SpPlaybackSeek(uint32_t)</code><br>
	 * <i>native declaration : line 162</i>
	 */
	int SpPlaybackSeek(int millis);
	/**
	 * Original signature : <code>SpError SpPlaybackUpdateVolume(uint16_t)</code><br>
	 * <i>native declaration : line 163</i>
	 */
	int SpPlaybackUpdateVolume(Uint16 volume);
	/**
	 * Original signature : <code>SpError SpPlaybackEnableShuffle(_Bool)</code><br>
	 * <i>native declaration : line 164</i>
	 */
	int SpPlaybackEnableShuffle(int enable);
	/**
	 * Original signature : <code>SpError SpPlaybackEnableRepeat(_Bool)</code><br>
	 * <i>native declaration : line 165</i>
	 */
	int SpPlaybackEnableRepeat(int enable);
	/**
	 * Original signature : <code>SpError SpPlaybackSetBitrate(SpBitrate)</code><br>
	 * <i>native declaration : line 166</i>
	 */
	int SpPlaybackSetBitrate(int bitrate);
	/**
	 * Original signature : <code>uint16_t SpPlaybackGetVolume()</code><br>
	 * <i>native declaration : line 168</i>
	 */
	Uint16 SpPlaybackGetVolume();
	/**
	 * Original signature : <code>_Bool SpPlaybackIsPlaying()</code><br>
	 * <i>native declaration : line 169</i>
	 */
	int SpPlaybackIsPlaying();
	/**
	 * Original signature : <code>_Bool SpPlaybackIsShuffled()</code><br>
	 * <i>native declaration : line 170</i>
	 */
	int SpPlaybackIsShuffled();
	/**
	 * Original signature : <code>_Bool SpPlaybackIsRepeated()</code><br>
	 * <i>native declaration : line 171</i>
	 */
	int SpPlaybackIsRepeated();
	/**
	 * Original signature : <code>_Bool SpPlaybackIsActiveDevice()</code><br>
	 * <i>native declaration : line 172</i>
	 */
	int SpPlaybackIsActiveDevice();
	/**
	 * Original signature : <code>SpError SpConnectionLoginBlob(const char*, const char*)</code><br>
	 * <i>native declaration : line 174</i><br>
	 * @deprecated use the safer methods {@link #SpConnectionLoginBlob(java.lang.String, java.lang.String)} and {@link #SpConnectionLoginBlob(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SpConnectionLoginBlob(Pointer username, Pointer blob);
	/**
	 * Original signature : <code>SpError SpConnectionLoginBlob(const char*, const char*)</code><br>
	 * <i>native declaration : line 174</i>
	 */
	int SpConnectionLoginBlob(String username, String blob);
	/**
	 * Original signature : <code>SpError SpConnectionLoginPassword(const char*, const char*)</code><br>
	 * <i>native declaration : line 175</i><br>
	 * @deprecated use the safer methods {@link #SpConnectionLoginPassword(java.lang.String, java.lang.String)} and {@link #SpConnectionLoginPassword(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SpConnectionLoginPassword(Pointer login, Pointer password);
	/**
	 * Original signature : <code>SpError SpConnectionLoginPassword(const char*, const char*)</code><br>
	 * <i>native declaration : line 175</i>
	 */
	int SpConnectionLoginPassword(String login, String password);
	/**
	 * Original signature : <code>SpError SpConnectionLoginZeroConf(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : line 176</i><br>
	 * @deprecated use the safer methods {@link #SpConnectionLoginZeroConf(java.lang.String, java.lang.String, java.lang.String)} and {@link #SpConnectionLoginZeroConf(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SpConnectionLoginZeroConf(Pointer username, Pointer blob, Pointer clientKey);
	/**
	 * Original signature : <code>SpError SpConnectionLoginZeroConf(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : line 176</i>
	 */
	int SpConnectionLoginZeroConf(String username, String blob, String clientKey);
	/**
	 * Original signature : <code>SpError SpConnectionLoginOauthToken(const char*)</code><br>
	 * <i>native declaration : line 178</i><br>
	 * @deprecated use the safer methods {@link #SpConnectionLoginOauthToken(java.lang.String)} and {@link #SpConnectionLoginOauthToken(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int SpConnectionLoginOauthToken(Pointer token);
	/**
	 * Original signature : <code>SpError SpConnectionLoginOauthToken(const char*)</code><br>
	 * <i>native declaration : line 178</i>
	 */
	int SpConnectionLoginOauthToken(String token);
	/**
	 * Original signature : <code>_Bool SpConnectionIsLoggedIn()</code><br>
	 * <i>native declaration : line 180</i>
	 */
	int SpConnectionIsLoggedIn();
	/**
	 * Original signature : <code>SpError SpConnectionLogout()</code><br>
	 * <i>native declaration : line 181</i>
	 */
	int SpConnectionLogout();
	/**
	 * Original signature : <code>SpError SpRegisterConnectionCallbacks(const SpConnectionCallbacks*, void*)</code><br>
	 * <i>native declaration : line 183</i>
	 */
	int SpRegisterConnectionCallbacks(SpConnectionCallbacks callbacks, Pointer userdata);
	/**
	 * Original signature : <code>SpError SpRegisterPlaybackCallbacks(const SpPlaybackCallbacks*, void*)</code><br>
	 * <i>native declaration : line 185</i>
	 */
	int SpRegisterPlaybackCallbacks(SpPlaybackCallbacks callbacks, Pointer userdata);
	/**
	 * Original signature : <code>SpError SpRegisterDebugCallbacks(const SpDebugCallbacks*, void*)</code><br>
	 * <i>native declaration : line 187</i>
	 */
	int SpRegisterDebugCallbacks(SpDebugCallbacks callbacks, Pointer userdata);
	public static class _Bool extends PointerType {
		public _Bool(Pointer address) {
			super(address);
		}
		public _Bool() {
			super();
		}
	};
}
